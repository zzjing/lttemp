// Type 1: Map<String, Set<String>> user --> user search history
// Map<String, Map<String, Integer>> word --> word's related words and related frequency

// Type 2: Map<String, Set<String>> user --> user search history
// Map<String, Set<String>> word --> word's related words

// 1) Output result per input
// 2) Read Map 1 update Map 2
// 3) Update Map 1

public List<String> topKFrequent(String[] words, int k) {
        List<String> topK = new ArrayList<>();
        Map<String, Integer> wordToFrequency = new HashMap<>();
        for (String word : words) {
            if (!wordToFrequency.containsKey(word)) {
                wordToFrequency.put(word, 1);
            } else {
                wordToFrequency.put(word, wordToFrequency.get(word) + 1);
            }
        }
        PriorityQueue<String> wordsRank =
            new PriorityQueue<>(k, (a, b) -> wordToFrequency.get(a) == wordToFrequency.get(b) ?
                a.compareTo(b) : wordToFrequency.get(b) - wordToFrequency.get(a));
        for (String word : wordToFrequency.keySet()) {
            wordsRank.offer(word);
        }
        for (int i = 0; i < k; i++) {
            topK.add(wordsRank.poll());
        }
        return topK;
    }
